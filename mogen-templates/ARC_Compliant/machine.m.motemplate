// DO NOT EDIT. This file is machine-generated and constantly overwritten.
// Make changes to <$managedObjectClassName$>.m instead.

#import "_<$managedObjectClassName$>.h"

@implementation <$managedObjectClassName$>ID
@end

@implementation _<$managedObjectClassName$>

+ (id)insertInManagedObjectContext:(NSManagedObjectContext*)moc_ {
	NSParameterAssert(moc_);
	return [NSEntityDescription insertNewObjectForEntityForName:@"<$name$>" inManagedObjectContext:moc_];
}

+ (NSString*)entityName {
	static NSString* entityName_ = nil;	
	if (!entityName_) {
		entityName_ = @"<$name$>";
	}	
	return entityName_;
}

+ (NSSet *)keyPathsForValuesAffectingValueForKey:(NSString *)key {
	NSSet *keyPaths = [super keyPathsForValuesAffectingValueForKey:key];
	<$foreach Attribute noninheritedAttributes do$><$if Attribute.hasDefinedAttributeType$><$if Attribute.hasScalarAttributeType$>if ([key isEqualToString:@"<$Attribute.name$>Value"]) {
		NSSet *affectingKey = [NSSet setWithObject:@"<$Attribute.name$>"];
		keyPaths = [keyPaths setByAddingObjectsFromSet:affectingKey];
	}<$endif$><$endif$><$endforeach do$>return keyPaths;
}

<$foreach Attribute noninheritedAttributes do$>+ (NSString*)<$Attribute.name$>Key {
	static NSString* <$Attribute.name$>Key_ = nil;	
	if (!<$Attribute.name$>Key_) {
		<$Attribute.name$>Key_ = @"<$Attribute.name$>";
	}	
	return <$Attribute.name$>Key_;
}

<$endforeach do$><$foreach Relationship noninheritedRelationships do$>+ (NSString*)<$Relationship.name$>Key {
	static NSString* <$Relationship.name$>Key_ = nil;	
	if (!<$Relationship.name$>Key_) {
		<$Relationship.name$>Key_ = @"<$Relationship.name$>";
	}	
	return <$Relationship.name$>Key_;
}

<$endforeach do$><$foreach FetchedProperty noninheritedFetchedProperties do$>+ (NSString*)<$FetchedProperty.name$>Key {
	static NSString* <$FetchedProperty.name$>Key_ = nil;	
	if (!<$FetchedProperty.name$>Key_) {
		<$FetchedProperty.name$>Key_ = @"<$FetchedProperty.name$>";
	}	
	return <$FetchedProperty.name$>Key_;
}

<$endforeach do$>
+ (id)create<$name$>With<$foreach Attribute noninheritedAttributes do$><$if !Attribute.isOptional$><$Attribute.name.initialCapitalString$>:(<$Attribute.objectAttributeType$>*)<$Attribute.name$>_ <$endif$><$endforeach do$><$foreach Relationship noninheritedRelationships do$><$if !Relationship.isOptional$><$Relationship.name.initialCapitalString$>:(<$if Relationship.isToMany$>NSSet<$endif$><$if !Relationship.isToMany$><$Relationship.destinationEntity.managedObjectClassName$><$endif$>*)<$Relationship.name$>_ <$endif$><$endforeach do$>insertIntoManagedObjectContext:(NSManagedObjectContext*)moc_{
	NSParameterAssert(moc_);
	return [[self alloc] initWith<$foreach Attribute noninheritedAttributes do$><$if !Attribute.isOptional$><$Attribute.name.initialCapitalString$>:<$Attribute.name$>_ <$endif$><$endforeach do$><$foreach Relationship noninheritedRelationships do$><$if !Relationship.isOptional$><$Relationship.name.initialCapitalString$>:<$Relationship.name$>_ <$endif$><$endforeach do$>insertIntoManagedObjectContext:moc_];
}

+ (NSEntityDescription*)entityInManagedObjectContext:(NSManagedObjectContext*)moc_ {
	NSParameterAssert(moc_);
	return [NSEntityDescription entityForName:[_<$name$> entityName] inManagedObjectContext:moc_];
}

- (id)initWith<$foreach Attribute noninheritedAttributes do$><$if !Attribute.isOptional$><$Attribute.name.initialCapitalString$>:(<$Attribute.objectAttributeType$>*)<$Attribute.name$>_ <$endif$><$endforeach do$><$foreach Relationship noninheritedRelationships do$><$if !Relationship.isOptional$><$Relationship.name.initialCapitalString$>:(<$if Relationship.isToMany$>NSSet<$endif$><$if !Relationship.isToMany$><$Relationship.destinationEntity.managedObjectClassName$><$endif$>*)<$Relationship.name$>_ <$endif$><$endforeach do$>insertIntoManagedObjectContext:moc_ {
	NSParameterAssert(moc_);
	self = [super initWithEntity:[NSEntityDescription entityForName:[_<$name$> entityName] inManagedObjectContext:moc_] insertIntoManagedObjectContext:moc_];<$foreach Attribute noninheritedAttributes do$><$if !Attribute.isOptional$>
	self.<$Attribute.name$> = <$Attribute.name$>_;<$endif$><$endforeach do$><$foreach Relationship noninheritedRelationships do$><$if !Relationship.isOptional$>
	self.<$Relationship.name$> = <$Relationship.name$>_;<$endif$><$endforeach do$>
	return self;
}

- (<$managedObjectClassName$>ID*)objectID {
	return (<$managedObjectClassName$>ID*)[super objectID];
}

<$foreach Attribute noninheritedAttributes do$><$if Attribute.hasDefinedAttributeType$>
// Attribute: <$Attribute.name$>
// Basic getter and setter for <$Attribute.name$> provided by CoreData
@dynamic <$Attribute.name$>;
<$if Attribute.hasScalarAttributeType$>
// Special getter for <$Attribute.name$> that returns a <$Attribute.scalarAttributeType$> value
- (<$Attribute.scalarAttributeType$>)<$Attribute.name$>Value {
	NSNumber *result = [self <$Attribute.name$>];
	return [result <$Attribute.scalarAttributeType.camelCaseString$>Value];
}

// Special setter for <$Attribute.name$> that takes a <$Attribute.scalarAttributeType$> value
- (void)set<$Attribute.name.initialCapitalString$>Value:(<$Attribute.scalarAttributeType$>)value_ {
	[self set<$Attribute.name.initialCapitalString$>:[NSNumber numberWith<$Attribute.scalarAttributeType.camelCaseString.initialCapitalString$>:value_]];
}

// Special getter for primitive<$Attribute.name.initialCapitalString$> that returns a <$Attribute.scalarAttributeType$>
- (<$Attribute.scalarAttributeType$>)primitive<$Attribute.name.initialCapitalString$>Value {
	NSNumber *result = [self primitive<$Attribute.name.initialCapitalString$>];
	return [result <$Attribute.scalarAttributeType.camelCaseString$>Value];
}

// Special setter for primitive<$Attribute.name.initialCapitalString$> that takes a <$Attribute.scalarAttributeType$>
- (void)setPrimitive<$Attribute.name.initialCapitalString$>Value:(<$Attribute.scalarAttributeType$>)value_ {
	[self setPrimitive<$Attribute.name.initialCapitalString$>:[NSNumber numberWith<$Attribute.scalarAttributeType.camelCaseString.initialCapitalString$>:value_]];
}<$endif$><$endif$><$endforeach do$>

<$foreach Relationship noninheritedRelationships do$>
// Basic getter and setter for <$Attribute.name$> provided by CoreData
@dynamic <$Relationship.name$>;
<$if Relationship.isToMany$>
- (<$Relationship.mutableCollectionClassName$>*)<$Relationship.name$>Set {
	[self willAccessValueForKey:[_<$name$> <$Relationship.name$>Key]];
	<$Relationship.mutableCollectionClassName$> *result = (<$Relationship.mutableCollectionClassName$>*)[self mutableSetValueForKey:[_<$name$> <$Relationship.name$>Key]];
	[self didAccessValueForKey:[_<$name$> <$Relationship.name$>Key]];
	return result;
}
<$endif$>
<$endforeach do$>

<$foreach FetchedProperty noninheritedFetchedProperties do$>
@dynamic <$FetchedProperty.name$>;<$endforeach do$>

<$foreach FetchRequest prettyFetchRequests do$>
<$if FetchRequest.singleResult$>
+ (id)fetch<$FetchRequest.name.initialCapitalString$>:(NSManagedObjectContext*)moc_ <$foreach Binding FetchRequest.bindings do2$><$Binding.name$>:(<$Binding.type$>)<$Binding.name$>_ <$endforeach do2$>{
	NSError *error = nil;
	id result = [self fetch<$FetchRequest.name.initialCapitalString$>:moc_ <$foreach Binding FetchRequest.bindings do2$><$Binding.name$>:<$Binding.name$>_ <$endforeach do2$>error:&error];
	if (error) {
#if TARGET_OS_IPHONE
		NSLog(@"error: %@", error);
#else
		[NSApp presentError:error];
#endif
	}
	return result;
}
+ (id)fetch<$FetchRequest.name.initialCapitalString$>:(NSManagedObjectContext*)moc_ <$foreach Binding FetchRequest.bindings do2$><$Binding.name$>:(<$Binding.type$>)<$Binding.name$>_ <$endforeach do2$>error:(NSError**)error_ {
	NSParameterAssert(moc_);
	NSError *error = nil;
	
	NSManagedObjectModel *model = [[moc_ persistentStoreCoordinator] managedObjectModel];
	<$if FetchRequest.hasBindings$>
	NSDictionary *substitutionVariables = [NSDictionary dictionaryWithObjectsAndKeys:
														<$foreach Binding FetchRequest.bindings do2$>
														<$Binding.name$>_, @"<$Binding.name$>",
														<$endforeach do2$>
														nil];
	<$else$>
	NSDictionary *substitutionVariables = [NSDictionary dictionary];
	<$endif$>
	NSFetchRequest *fetchRequest = [model fetchRequestFromTemplateWithName:@"<$FetchRequest.name$>"
													 substitutionVariables:substitutionVariables];
	NSAssert(fetchRequest, @"Can't find fetch request named \"<$FetchRequest.name$>\".");
	
	id result = nil;
	NSArray *results = [moc_ executeFetchRequest:fetchRequest error:&error];
	
	if (!error) {
		switch ([results count]) {
			case 0:
				//	Nothing found matching the fetch request. That's cool, though: we'll just return nil.
				break;
			case 1:
				result = [results objectAtIndex:0];
				break;
			default:
				NSLog(@"WARN fetch request <$FetchRequest.name$>: 0 or 1 objects expected, %u found (substitutionVariables:%@, results:%@)",
					[results count],
					substitutionVariables,
					results);
		}
	}
	
	if (error_) *error_ = error;
	return result;
}
<$else$>
+ (NSArray*)fetch<$FetchRequest.name.initialCapitalString$>:(NSManagedObjectContext*)moc_ <$foreach Binding FetchRequest.bindings do2$><$Binding.name$>:(<$Binding.type$>)<$Binding.name$>_ <$endforeach do2$>{
	NSError *error = nil;
	NSArray *result = [self fetch<$FetchRequest.name.initialCapitalString$>:moc_ <$foreach Binding FetchRequest.bindings do2$><$Binding.name$>:<$Binding.name$>_ <$endforeach do2$>error:&error];
	if (error) {
#if TARGET_OS_IPHONE
		NSLog(@"error: %@", error);
#else
		[NSApp presentError:error];
#endif
	}
	return result;
}
+ (NSArray*)fetch<$FetchRequest.name.initialCapitalString$>:(NSManagedObjectContext*)moc_ <$foreach Binding FetchRequest.bindings do2$><$Binding.name$>:(<$Binding.type$>)<$Binding.name$>_ <$endforeach do2$>error:(NSError**)error_ {
	NSParameterAssert(moc_);
	NSError *error = nil;
	
	NSManagedObjectModel *model = [[moc_ persistentStoreCoordinator] managedObjectModel];
	<$if FetchRequest.hasBindings$>
	NSDictionary *substitutionVariables = [NSDictionary dictionaryWithObjectsAndKeys:
														<$foreach Binding FetchRequest.bindings do2$>
														<$Binding.name$>_, @"<$Binding.name$>",
														<$endforeach do2$>
														nil];
	<$else$>
	NSDictionary *substitutionVariables = [NSDictionary dictionary];
	<$endif$>									
	NSFetchRequest *fetchRequest = [model fetchRequestFromTemplateWithName:@"<$FetchRequest.name$>"
													 substitutionVariables:substitutionVariables];
	NSAssert(fetchRequest, @"Can't find fetch request named \"<$FetchRequest.name$>\".");
	
	NSArray *result = [moc_ executeFetchRequest:fetchRequest error:&error];
	if (error_) *error_ = error;
	return result;
}
<$endif$>
<$endforeach do$>
@end
